name: 'Terraform Cloud'

on:
  push:
    branches: [ main ]
  pull_request:

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      # Format Terraform files to avoid fmt check failure
      - name: Format Terraform files
        run: terraform fmt -recursive

      - name: Initialize Terraform
        run: terraform init

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      # Comment the plan output on the pull request
      - name: Comment on Pull Request with Plan
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Initialization ‚öôÔ∏è: \`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ: \`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Triggered by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Check Terraform Plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      # Apply changes on push to the main branch
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
